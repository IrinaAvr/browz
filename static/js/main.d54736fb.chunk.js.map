{"version":3,"sources":["ItemsList.js","App.js","serviceWorker.js","index.js"],"names":["ItemsList","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","item","e","setState","selected","onClickMethod","styleSwitch","state","nextProps","console","log","react_default","a","createElement","className","list","map","key","name","onClick","bind","React","Component","Customers","clients","uniqueCountries","Country","filter","onlyUnique","CountryInd","sort","b","localeCompare","forEach","i","arr","uniqueCitiesList","obj","City","CitiesInd","item2","i2","arr2","companiesList","el","CompanyName","push","Ind","length","CompareObjectByInd","cities","selectedCity","selectedCompany","srcMapsURL","selectedCountry","value","index","self","indexOf","App","onSelectCountry","FilterCities","onSelectCity","FilterCompanies","onSelectCompany","ReloadMap","InitComponent","country","citiesList","city","searchString","encodeURI","cellspacing","src_ItemsList","iframe","url","width","height","id","frameBorder","display","position","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d54736fb.chunk.js","sourcesContent":["import React from 'react';\n//import Item from './item.js';\r\n          \r\nclass ItemsList extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\t//this.handleClick = this.handleClick.bind(this);\n\t\t//alert(this.props.selected);\n\t\tthis.state={selected:this.props.selected}\r\n    } \r\n\r\n\r\n    handleClick = (item, e) =>{\n\t\n\t\tthis.setState({selected: item});\r\n\t\tthis.props.onClickMethod(item,e);\n\t\t//alert(\"ItemList Click \" + item );\n\t\t//console.log(item);\r\n    }\n\t\n\tstyleSwitch = (item, e) =>{\n\t\t//alert(item);\n\t\t//alert(this.props.selected);\n\t\tif (item === this.props.selected)\n\t\t\treturn \"selItem\";\n\t\telse\n\t\t\treturn \"liItem\";\n\t}\n\tcomponentWillReceiveProps(nextProps){\n\t\tconsole.log(nextProps.selected);\n\t\tthis.setState({selected: nextProps.selected});\n\t\t\n\t\t\n\t}\r\n\r\n    render(){\n\t\treturn(\n\t\t<div className = \"DivList\">         \r\n\t\t\t<ul>\r\n\t\t\t  { this.props.list.map(function(item) {\r\n\t\t\t\treturn <li className= {this.state.selected === item ? 'selItem': 'liItem' } key={item} name={item} onClick={this.handleClick.bind(this,item)}>{item}</li>}, this)\r\n\t\t\t  }\r\n\t\t\t</ul>\r\n        </div>);\r\n    }\r\n}\r\nexport default ItemsList;","import React from 'react';\nimport ItemsList from './ItemsList';\nimport Iframe from 'react-iframe';\nimport './App.css';\nimport * as clients from './clients.json';\n\n\nvar Customers = clients.Customers;\nvar countries = Customers.map(function(item){return item.Country});\nvar uniqueCountries = countries.filter(onlyUnique);\nvar CountryInd = [];\n\nuniqueCountries.sort((a, b) => a.localeCompare(b));\nuniqueCountries.forEach(function(item, i, arr)\n{\n\tlet citiesList = Customers.filter((obj) => obj.Country === item)\n\t\t.map((item) =>{return item.City;})\n\tlet uniqueCitiesList = citiesList.filter(onlyUnique);\n\tlet CitiesInd = [];\n\tuniqueCitiesList.forEach(function(item2, i2, arr2)\n\t{\n\t\tlet companiesList = Customers.filter((obj) => (obj.Country === item && obj.City === item2))\n\t\t\t.map((el) => {return el.CompanyName;});\n\t\tcompaniesList.sort((a, b) => a.localeCompare(b)); //Sort Companies By ABC\n\t\tCitiesInd.push({\n\t\t\t\t City: item2,\n\t\t\t\t Ind: companiesList.length,\n\t\t\t\t companiesList: companiesList\n\t\t\t});\n\t\tCitiesInd.sort(CompareObjectByInd); //Sort Cities By Count of Company desc                       \n\t});\n\tCountryInd.push({\n\t\t\t\t\tCountry: item,\n\t\t\t\t\tInd: uniqueCitiesList.length,\n\t\t\t\t\tCitiesInd: CitiesInd\n\t\t\t\t\t});\n\tCitiesInd = [];\n});\nCountryInd.sort(CompareObjectByInd); //Sort Countries By Count of Cities desc\nuniqueCountries = CountryInd.map((item) => {return item.Country});\nvar selectedCountry = uniqueCountries[0];\nvar cities;\nvar uniqueCitiesList, selectedCity;\nvar companiesList, selectedCompany;\nvar srcMapsURL;\n\nfunction onlyUnique(value, index, self)\n{\n   return self.indexOf(value) === index;\n}\n\nfunction CompareObjectByInd(a, b)\n{\n   if (a.Ind > b.Ind) return -1;\n   if (b.Ind > a.Ind) return 1;\n   return 0;\n}\nclass App extends React.Component\n{\n   constructor(props)\n   {\n\t\tsuper(props);\n\t\tthis.InitComponent();\n\t\tthis.state = {\n\t\t\t\t uniqueCountries: uniqueCountries,\n\t\t\t\t selectedCountry: selectedCountry,\n\t\t\t\t uniqueCitiesList: uniqueCitiesList,\n\t\t\t\t selectedCity: selectedCity,\n\t\t\t\t companiesList: companiesList,\n\t\t\t\t selectedCompany: selectedCompany,\n\t\t\t\t srcMapsURL: srcMapsURL\n\t\t};\n   }\n   InitComponent()\n   {\n\t\tthis.FilterCities(selectedCountry);\n\t\tthis.FilterCompanies(selectedCity);\n   }\n   FilterCities(country)\n   {\n\t\tcities = CountryInd.filter((item) => item.Country === country).map((item) =>\n\t\t{\n\t\t return item.CitiesInd;\n\t\t});\n\t\t//console.log(cities);\n\t\tlet citiesList = cities[0].map(function(item)\n\t\t{\n\t\t return item.City;\n\t\t});\n\n\t\tuniqueCitiesList = citiesList.filter(onlyUnique);\n\t\tselectedCity = uniqueCitiesList[0];\n\t\tthis.FilterCompanies(selectedCity);\n   }\n   \n   FilterCompanies(city)\n   {\n        console.log(cities[0]);  \n          \n\t\tcompaniesList = cities[0].filter((item) => item.City === city)[0].companiesList;\n\t\tconsole.log(companiesList);  \n\n\t\tselectedCompany = companiesList[0];\n\t\tthis.ReloadMap();\n   }\n   \n   ReloadMap()\n      {\t\n        let searchString = encodeURI(selectedCountry + \",\" + selectedCity + \",\" + selectedCompany);\n        srcMapsURL = \"https://maps.google.com/maps?q=\" + searchString + \"&t=&z=11&ie=UTF8&iwloc=&output=embed\"; //encodeURI();\n      }\n      /* onlyUnique(value, index, self) {\n\n      return self.indexOf(value) === index;\n\n      } */\n   onSelectCountry = (item, e) =>\n   {\n      selectedCountry = item;\n      this.setState({selectedCountry: item});\n      this.FilterCities(item);\n      this.setState({uniqueCitiesList: uniqueCitiesList});\n      this.setState({selectedCity: selectedCity});\n      this.setState({companiesList: companiesList});\n      this.setState({selectedCompany: selectedCompany});\n      this.setState({srcMapsURL: srcMapsURL});\n   }\n   onSelectCity = (item) =>\n   {\n      selectedCity = item;\n      this.setState({selectedCity: item});\n      this.FilterCompanies(item);\n      this.setState({companiesList: companiesList});\n      this.setState({selectedCompany: selectedCompany});\n      this.setState({srcMapsURL: srcMapsURL});\n   }\n   onSelectCompany = (item) =>\n   {\n      selectedCompany = item;\n      this.setState({selectedCompany: item});\n      this.ReloadMap();\n      this.setState({srcMapsURL: srcMapsURL});\n   }\n\n \n\n    render(){\n        return(\t<div className=\"App\">\n\t\t\t\t   <table cellspacing=\"0\">\n\t\t\t\t\t  <thead>\n\t\t\t\t\t\t <tr>\n\t\t\t\t\t\t\t<th>Countries</th>\n\t\t\t\t\t\t\t<th>Cities</th>\n\t\t\t\t\t\t\t<th>Companies</th>\n\t\t\t\t\t\t\t<th>Map</th>\n\t\t\t\t\t\t </tr>\n\t\t\t\t\t  </thead>\n\t\t\t\t\t  <tbody>\n\t\t\t\t\t\t <tr>\n\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t   <ItemsList list={this.state.uniqueCountries} onClickMethod={this.onSelectCountry} selected={this.state.selectedCountry}></ItemsList>\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t   <ItemsList list={this.state.uniqueCitiesList} onClickMethod={this.onSelectCity} selected={this.state.selectedCity}></ItemsList>\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t   <ItemsList list={this.state.companiesList} onClickMethod={this.onSelectCompany} selected={this.state.selectedCompany}></ItemsList>\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t   <div className=\"mapouter\">\n\t\t\t\t\t\t\t\t <div className=\"gmap_canvas\">\n\t\t\t\t\t\t\t\t\t <Iframe url={this.state.srcMapsURL} width=\"500px\" height=\"300px\" id=\"gmap_canvas\" frameBorder=\"0\" display=\"initial\" position=\"relative\"></Iframe>\n\t\t\t\t\t\t\t\t  </div>\n\t\t\t\t\t\t\t   </div>\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t </tr>\n\t\t\t\t\t  </tbody>\n\t\t\t\t   </table>\n\t\t\t\t</div>);\n\t\t\t}\n\t\n}export default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\n\nimport ReactDOM from 'react-dom';\r\n\nimport './index.css';\r\n\nimport App from './App';\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\nimport * as clients from './clients.json';\r\nconsole.log(clients.Customers);\r\n//console.log(clients.Customers[0].Country);\r\n\r\n\r\n\r\n\nReactDOM.render(<App />, document.getElementById('root'));\r\n\n\r\n\n// If you want your app to work offline and load faster, you can change\n\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}