{"version":3,"sources":["ItemsList.js","App.js","serviceWorker.js","index.js"],"names":["ItemsList","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","item","e","setState","selected","onClickMethod","styleSwitch","state","nextProps","console","log","react_default","a","createElement","className","list","map","key","name","onClick","bind","React","Component","Customers","clients","countries","Country","countries2","City","uniqueCountries","filter","onlyUnique","sort","b","localeCompare","cities","uniqueCitiesList","selectedCity","companiesList","selectedCompany","srcMapsURL","selectedCountry","value","index","self","indexOf","App","onSelectCountry","FilterCities","onSelectCity","FilterCompanies","onSelectCompany","ReloadMap","InitComponent","country","citiesList","_ref","CompanyName","city","searchString","encodeURI","replace","src_ItemsList","iframe","url","width","height","id","frameBorder","display","position","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ebee3c96.chunk.js","sourcesContent":["import React from 'react';\n//import Item from './item.js';\r\n          \r\nclass ItemsList extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\t//this.handleClick = this.handleClick.bind(this);\n\t\t//alert(this.props.selected);\n\t\tthis.state={selected:this.props.selected}\r\n    } \r\n\r\n\r\n    handleClick = (item, e) =>{\n\t\n\t\tthis.setState({selected: item});\r\n\t\tthis.props.onClickMethod(item,e);\n\t\t//alert(\"ItemList Click \" + item );\n\t\t//console.log(item);\r\n    }\n\t\n\tstyleSwitch = (item, e) =>{\n\t\t//alert(item);\n\t\t//alert(this.props.selected);\n\t\tif (item === this.props.selected)\n\t\t\treturn \"selItem\";\n\t\telse\n\t\t\treturn \"liItem\";\n\t}\n\tcomponentWillReceiveProps(nextProps){\n\t\tconsole.log(nextProps.selected);\n\t\tthis.setState({selected: nextProps.selected});\n\t\t\n\t\t\n\t}\r\n\r\n    render(){\n\t\treturn(\n\t\t<div className = \"DivList\">         \r\n\t\t\t<ul>\r\n\t\t\t  { this.props.list.map(function(item) {\r\n\t\t\t\treturn <li className= {this.state.selected === item ? 'selItem': 'liItem' } key={item} name={item} onClick={this.handleClick.bind(this,item)}>{item}</li>}, this)\r\n\t\t\t  }\r\n\t\t\t</ul>\r\n        </div>);\r\n    }\r\n}\r\nexport default ItemsList;","import React from 'react';\nimport './App.css';\r\nimport ItemsList from './ItemsList';\nimport * as clients from './clients.json';\nimport Iframe from 'react-iframe';\n\n\nvar Customers = clients.Customers;\n\r\nvar countries = Customers.map(function(item){\n\t\t\t\treturn item.Country\n\t\t\t})\n\t\t\t\nvar countries2 = Customers.map((item) =>{return{'Country':item.Country, 'City': item.City}});\n\t\nconsole.log(countries2);\nvar uniqueCountries = countries.filter(onlyUnique);\n\n//var n = countries.includes(uniqueCountries)\n\n//var uniqueCountriesInd = uniqueCountries.map((val)=>{return{'Count':countries.includes(val), 'Country':val}});\n\n//console.log(uniqueCountriesInd);\n\nuniqueCountries.sort((a, b)=> a.localeCompare(b));\n\n//console.log(uniqueCountries);\n\nvar selectedCountry = uniqueCountries[0];\nvar cities;\n\nvar uniqueCitiesList, selectedCity;\nvar companiesList, selectedCompany; \n\nvar srcMapsURL;\n\t\nfunction onlyUnique(value, index, self) { \n    return self.indexOf(value) === index;\n}\n\n\n\r\n//function App()\r\nclass App extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\n\n\t\tthis.InitComponent();\n\t\t\n\t\tthis.state = { \tuniqueCountries: uniqueCountries,\n\t\t\t\t\t\tselectedCountry: selectedCountry,\n\t\t\t\t\t\tuniqueCitiesList: uniqueCitiesList,\n\t\t\t\t\t\tselectedCity: selectedCity,\n\t\t\t\t\t\tcompaniesList:companiesList,\n\t\t\t\t\t\tselectedCompany: selectedCompany,\n\t\t\t\t\t\tsrcMapsURL:srcMapsURL\n\t\t\t\t\t};\n\t   \r\n    }\n\t\n\tInitComponent(){\n\t\t\n\t\tthis.FilterCities(selectedCountry);\n\t\t\n\t\tthis.FilterCompanies(selectedCity);\n\t\n\t}\n\t\n\t\n\tFilterCities(country){\n\t\t//alert(\"FilterCities \" + item);\n\t\t//console.log(Customers);\n\t\tcities = Customers.filter((item) => item.Country === country)\n\t\t\t\t.map(({City, CompanyName}) => ({City, CompanyName}));\n\t\t\t\t\n\t\tlet citiesList = cities.map(function(item){\n\t\t\t\t\t\t\t\treturn item.City;\n\t\t\t\t\t\t\t});\n\n\t\tuniqueCitiesList = citiesList.filter(onlyUnique); \n\t\t//console.log(uniqueCitiesList);\n\t\t//this.setState({uniqueCitiesList: uniqueCitiesList});\n\t\t//console.log(uniqueCitiesList);\n\t\tselectedCity = uniqueCitiesList[0];\n\t\t//this.setState({selectedCity: selectedCity});\n\t\t//console.log(this.state.selectedCity);\n\t\tthis.FilterCompanies(selectedCity);\n\t\n\t}\n\n\tFilterCompanies(city){\n\t\n\t\tcompaniesList = cities.filter((item) => item.City === city)\t\t    \n\t\t\t.map(function(item){\n\t\t\t\t\t\t\treturn item.CompanyName;\n\t\t\t\t\t\t});\n\t\t\n\t\tselectedCompany = companiesList[0];\n\t\t//console.log(\"companiesList\" + this.state);\n\t\t\n\t\t//console.log(\"selectedCompany\" + this.state);\t\t\t\t\n\t\tthis.ReloadMap();\n\t}\n\t\n\tReloadMap(){\n\t\tlet searchString = encodeURI(selectedCountry + \",\" + selectedCity+  \",\" + selectedCompany.replace('', '+')); ;//+  \",\" + selectedCompany.replace('', '+')) \n\t\tsrcMapsURL = \"https://maps.google.com/maps?q=\" + searchString + \"&t=&z=11&ie=UTF8&iwloc=&output=embed\"; //encodeURI();\n\n\t}\n\t\n\t/* onlyUnique(value, index, self) { \n\t\treturn self.indexOf(value) === index;\n\t} */\r\n\r\n\tonSelectCountry =(item, e) =>{\r\n\t\t\n\t\tselectedCountry = item;\n\t\tthis.setState({selectedCountry: item});\n\t\t\n\t\tthis.FilterCities(item);\n\t\t//alert(selectedCity);\n\t\t\n\t\tthis.setState({uniqueCitiesList: uniqueCitiesList});\n\t\tthis.setState({selectedCity: selectedCity});\n\t\tthis.setState({companiesList: companiesList});\t\t\t\t\n\t\tthis.setState({selectedCompany: selectedCompany});\n\t\tthis.setState({srcMapsURL: srcMapsURL});\n\t\t//alert(srcMapsURL);\r\n\t}\n\t\n\tonSelectCity =(item) =>{\n\t\t//alert(\"SelectCity \" + item);\n\t\t\n\t\tselectedCity = item;\n\t\tthis.setState({selectedCity: item});\n\t\t\t\n\t\tthis.FilterCompanies(item);\n\t\tthis.setState({companiesList: companiesList});\t\t\t\t\n\t\tthis.setState({selectedCompany: selectedCompany});\n\t\tthis.setState({srcMapsURL: srcMapsURL});\n\t\t//alert(srcMapsURL);\n\t} \n\tonSelectCompany =(item) =>{\n\t\t\n\t\t//alert(\"SelectCompany \" + item);\n\t\tselectedCompany = item;\n\t\tthis.setState({selectedCompany: item});\n\t\t\n\t\t//console.log(\"onselectedCompany\" + this.state);\t\n\t\tthis.ReloadMap();\n\t\tthis.setState({srcMapsURL:srcMapsURL});\n\t\t\n\t} \n\n\n\t\r\n\r\n\trender() {\r\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t\t\t\t\t\r\n\t\t\t\n\t\t\t\t\t<table >\n\t\t\t\t\t<thead>\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<th>Countries</th>\n\t\t\t\t\t\t<th>Cities</th>\r\n\t\t\t\t\t\t<th>Companies</th>\r\n\t\t\t\t\t\t<th>Map</th>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t\t</thead>\r\n\t\t\t\t\t<tbody>\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<td ><ItemsList list = {this.state.uniqueCountries} onClickMethod={this.onSelectCountry} selected = {this.state.selectedCountry}></ItemsList></td>\r\n\t\t\t\t\t\t<td ><ItemsList list = {this.state.uniqueCitiesList} onClickMethod={this.onSelectCity} selected = {this.state.selectedCity}></ItemsList></td>\r\n\t\t\t\t\t\t<td ><ItemsList list = {this.state.companiesList} onClickMethod={this.onSelectCompany} selected = {this.state.selectedCompany}></ItemsList></td>\r\n\t\t\t\t\t\t<td >\t\r\n\t\t\t\t\t\t<div className=\"mapouter\">\r\n\t\t\t\t\t\t<div className=\"gmap_canvas\">\n\t\t\t\t\t\t<Iframe url={this.state.srcMapsURL}\n\t\t\t\t\t\t\twidth=\"500px\"\n\t\t\t\t\t\t\theight=\"300px\"\n\t\t\t\t\t\t\tid=\"gmap_canvas\"\n\t\t\t\t\t\t\tframeBorder=\"0\"\n\t\t\t\t\t\t\tdisplay=\"initial\"\n\t\t\t\t\t\t\tposition=\"relative\"></Iframe>\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</td>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t\t</tbody>\r\n\t\t\t\t</table>\r\n\r\n\t\t\t\r\n\t\t</div>\n  );\n\r\n}\n\r\n\r\n\r\n}\r\n\r\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\n\nimport ReactDOM from 'react-dom';\r\n\nimport './index.css';\r\n\nimport App from './App';\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\nimport * as clients from './clients.json';\r\nconsole.log(clients.Customers);\r\n//console.log(clients.Customers[0].Country);\r\n\r\n\r\n\r\n\nReactDOM.render(<App />, document.getElementById('root'));\r\n\n\r\n\n// If you want your app to work offline and load faster, you can change\n\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}